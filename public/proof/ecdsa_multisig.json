{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":8766902412886712300,"abi":{"parameters":[{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"operation_signature","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"identity_verification_signature","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"identity_pub_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"identity_pub_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"operation_pub_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"operation_pub_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signers_identifiers","type":{"kind":"array","length":96,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"threshold","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"contract_address","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13452066450966815008":{"error_kind":"string","string":"Verification signature does not match any authorized signer"}}},"bytecode":"","debug_symbols":"","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use keccak256::keccak256;\n\nglobal MAX_SIGNERS: u32 = 3;\n\npub fn main(\n    message_hash: [u8; 32], \n    operation_signature: [u8; 65],\n    identity_verification_signature: [u8; 65],\n    identity_pub_x: [u8; 32],\n    identity_pub_y: [u8; 32],\n    operation_pub_x: [u8; 32],\n    operation_pub_y: [u8; 32],\n    signers_identifiers: [u8; 32 * MAX_SIGNERS],\n    threshold: u32, \n    contract_address: [u8; 20]\n) -> pub (Field, Field, Field, Field) {\n    // --------------------IDENTITY VERIFICATION-------------------- // \n    // verify the identity signature is valid\n    let identity_verification_signature_message_hash = keccak256(\n        bytes_to_hex_string(contract_address),\n        40\n    );\n\n    let mut identity_sig_64: [u8; 64] = [0; 64];\n    for i in 0..64 {\n        identity_sig_64[i] = identity_verification_signature[i];\n    }\n    \n    assert(std::ecdsa_secp256k1::verify_signature(\n        identity_pub_x,\n        identity_pub_y, \n        identity_sig_64, \n        identity_verification_signature_message_hash\n    ));\n\n\n    let hashed_verification_signature = keccak256(signature_to_hex_string(identity_verification_signature), 130);\n\n    let mut is_valid = false;\n    for i in 0..MAX_SIGNERS {\n        if i < threshold {\n            let start_idx = i * 32;\n            let mut matches = true;\n            for j in 0..32 {\n                if hashed_verification_signature[j] != signers_identifiers[start_idx + j] {\n                    matches = false;\n                }\n            }\n            if matches {\n                is_valid = true;\n            }\n        }\n    }\n    assert(is_valid, \"Verification signature does not match any authorized signer\");\n\n    // --------------------PAYLOAD SIGNATURE VERIFICATION-------------------- // \n\n    let mut operation_sig_64: [u8; 64] = [0; 64];\n    for i in 0..64 {\n        operation_sig_64[i] = operation_signature[i];\n    }\n    \n    assert(std::ecdsa_secp256k1::verify_signature(operation_pub_x, operation_pub_y, operation_sig_64, message_hash));\n\n    let signer_identifiers_hash = hash_signer_identifiers(signers_identifiers, 3);\n\n    let message_hash_field_31_bytes = field_from_bytes_32_trunc(message_hash);\n    let signer_identifiers_hash_field_31_bytes = field_from_bytes_32_trunc(signer_identifiers_hash);\n\n    // Concatenate last bytes of both hashes\n    let message_hash_last_byte = message_hash[31] as Field;\n    let signer_identifier_hash_last_byte = signer_identifiers_hash[31] as Field;\n    // Multiply by 256 to shift left by 8 bits (equivalent to << 8)\n    let last_bytes_field = (message_hash_last_byte * 256) + signer_identifier_hash_last_byte;\n\n\n    (\n        address_to_field(contract_address),\n        message_hash_field_31_bytes,\n        signer_identifiers_hash_field_31_bytes,  \n        last_bytes_field\n    )\n}\n\n\n\nfn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n\n\n\nfn bytes_to_field(bytes: [u8; 32]) -> Field {\n    let mut result: Field = 0;\n    \n    // Convert bytes to field\n    for i in 0..32 {\n        result = result * 256 + (bytes[i] as Field);\n    }\n    \n    result\n}\n\n\nfn address_to_field(bytes: [u8; 20]) -> Field {\n    let mut result: Field = 0;\n    \n    // Convert bytes to field\n    for i in 0..20 {\n        result = result * 256 + (bytes[i] as Field);\n    }\n    \n    result\n}\n\nfn nibble_to_ascii(nibble: u8) -> u8 {\n    if nibble < 10 {\n        nibble + 48  // '0' to '9'\n    } else {\n        nibble + 87  // 'a' to 'f'\n    }\n}\n\n// Function to convert hex bytes to ASCII string representation\nfn signature_bytes_to_ascii(hex_bytes: [u8; 65]) -> [u8; 132] {\n    let mut result: [u8; 132] = [0; 132];\n    \n    // Add \"0x\" prefix\n    result[0] = 48;  // '0'\n    result[1] = 120; // 'x'\n    \n    // Convert each byte to two ASCII characters\n    for i in 0..65 {\n        let byte = hex_bytes[i];\n        let high_nibble = byte >> 4;\n        let low_nibble = byte & 0x0f;\n        \n        result[2 + i * 2] = nibble_to_ascii(high_nibble);\n        result[2 + i * 2 + 1] = nibble_to_ascii(low_nibble);\n    }\n    \n    result\n}\n\nfn address_bytes_to_ascii(address_bytes: [u8; 20]) -> [u8; 42] {\n    let mut result: [u8; 42] = [0; 42]; // 0x + 40 hex chars\n    \n    // Add \"0x\" prefix\n    result[0] = 48;  // '0'\n    result[1] = 120; // 'x'\n    \n    // Convert each byte to two ASCII characters\n    for i in 0..20 {\n        let byte = address_bytes[i];\n        let high_nibble = byte >> 4;\n        let low_nibble = byte & 0x0f;\n        \n        // Convert high nibble to hex\n        result[2 + i * 2] = if high_nibble < 10 {\n            high_nibble + 48 // '0' to '9'\n        } else {\n            high_nibble + 87 // 'a' to 'f'\n        };\n        \n        // Convert low nibble to hex\n        result[2 + i * 2 + 1] = if low_nibble < 10 {\n            low_nibble + 48 // '0' to '9'\n        } else {\n            low_nibble + 87 // 'a' to 'f'\n        };\n    }\n    \n    result\n}\n\nfn create_ethereum_signed_message_hash(message: [u8], message_len: u32) -> [u8; 32] {\n    // Create the Ethereum Signed Message prefix\n    let prefix: [u8; 26] = [\n        25, 69, 116, 104, 101, 114, 101, 117, 109, 32, 83, 105, 103, 110, 101, 100, 32, 77, 101, 115, 115, 97, 103, 101, 58, 10\n    ];\n    \n    // Convert message length to ASCII string\n    let mut length_str: [u8; 2] = [0; 2];\n    let tens = message_len / 10;\n    let ones = message_len % 10;\n    length_str[0] = 48 + tens as u8; // Convert to ASCII\n    length_str[1] = 48 + ones as u8; // Convert to ASCII\n    \n    // Calculate total length\n    let total_len = 26 + 2 + message_len as u32;\n    let mut full_message: [u8; 100] = [0; 100]; // Using a larger buffer to be safe\n    \n    // Copy prefix\n    for i in 0..26 {\n        full_message[i] = prefix[i];\n    }\n    \n    // Copy length string\n    for i in 0..2 {\n        full_message[26 + i] = length_str[i];\n    }\n    \n    // Copy message\n    for i in 0..message_len {\n        full_message[28 + i] = message[i];\n    }\n    \n    // Hash the full message\n    keccak256(full_message, total_len)\n}\n\n#[test]\nfn test_hex_literal_hashing() {\n    // The actual hex string bytes for \"5b38da6a701c568545dcfcb03fcb875f56beddc4\" (without 0x)\n    let address_str: [u8; 40] = [\n        53, 98, 51, 56, 100, 97, 54, 97, 55, 48, 49, 99, 53, 54, 56, 53, 52, 53, 100, 99, 102, 99, 98, 48, 51, 102, 99, 98, 56, 55, 53, 102, 53, 54, 98, 101, 100, 100, 99, 52\n    ];\n\n    // Create the Ethereum Signed Message prefix\n    let prefix: [u8; 26] = [\n        25, 69, 116, 104, 101, 114, 101, 117, 109, 32, 83, 105, 103, 110, 101, 100, 32, 77, 101, 115, 115, 97, 103, 101, 58, 10\n    ];\n    \n    // Create the length string \"40\" (length of address string)\n    let length_str: [u8; 2] = [52, 48]; // \"40\" in ASCII\n    \n    // Concatenate everything: prefix + length_str + address_str\n    let mut full_message: [u8; 68] = [0; 68];\n    \n    // Copy prefix\n    for i in 0..26 {\n        full_message[i] = prefix[i];\n    }\n    \n    // Copy length string\n    for i in 0..2 {\n        full_message[26 + i] = length_str[i];\n    }\n    \n    // Copy address string\n    for i in 0..40 {\n        full_message[28 + i] = address_str[i];\n    }\n\n    // Print the full message bytes\n    println(\"Full message bytes:\");\n    println(full_message);\n\n    // Hash the full message\n    println(\"Hash from full message:\");\n    let hash = keccak256(full_message, 68);\n    println(hash);\n\n   \n}\n\n#[test]\nfn test_ecdsa_verification() {\n    // Test data from previous test\n    let message_hash: [u8; 32] = [\n        0x6c, 0xf3, 0xc1, 0xc3, 0xe4, 0x05, 0xa2, 0x13, 0x73, 0x4d, 0x31, 0xbe, 0x4d, 0x4e, 0xed, 0x85, 0x3b, 0x03, 0x02, 0xa3, 0x83, 0x42, 0x7e, 0x0b, 0xe1, 0x5b, 0xe2, 0x31, 0x08, 0xb2, 0x37, 0x02\n    ];\n\n    // Signature: c0781763e94934afd8ae233236034b93cf948a5b80eb28c520e82cec11f2bbe426ec03f31eccf5ade14cd2b18660a95d38d78f3a8008fac8f50d9f16287eafd61b\n    let signature: [u8; 65] = [\n        0xc0, 0x78, 0x17, 0x63, 0xe9, 0x49, 0x34, 0xaf, 0xd8, 0xae, 0x23, 0x32, 0x36, 0x03, 0x4b, 0x93, 0xcf, 0x94, 0x8a, 0x5b, 0x80, 0xeb, 0x28, 0xc5, 0x20, 0xe8, 0x2c, 0xec, 0x11, 0xf2, 0xbb, 0xe4, 0x26, 0xec, 0x03, 0xf3, 0x1e, 0xcc, 0xf5, 0xad, 0xe1, 0x4c, 0xd2, 0xb1, 0x86, 0x60, 0xa9, 0x5d, 0x38, 0xd7, 0x8f, 0x3a, 0x80, 0x08, 0xfa, 0xc8, 0xf5, 0x0d, 0x9f, 0x16, 0x28, 0x7e, 0xaf, 0xd6, 0x1b\n    ];\n       \n    let mut sig_64: [u8; 64] = [0; 64];\n    for i in 0..64 {\n        sig_64[i] = signature[i];\n    }\n\n    let pub_x: [u8; 32] = [\n        0x32, 0x08, 0x25, 0x63, 0xc6, 0x93, 0x61, 0xcf, 0xe9, 0x74, 0xc7, 0xb6, 0x99, 0x6a, 0x14, 0x92, 0x17, 0xd9, 0xb4, 0x38, 0xb0, 0x4b, 0x94, 0x0a, 0x53, 0x0a, 0xd1, 0xbc, 0x23, 0x43, 0x37, 0xcc\n    ];\n\n    let pub_y: [u8; 32] = [\n        0x6a, 0x85, 0x02, 0x04, 0x8a, 0x03, 0x54, 0x28, 0x3f, 0xa1, 0xdb, 0x34, 0x64, 0x47, 0x83, 0x05, 0x2b, 0xdd, 0xc2, 0x6a, 0x5e, 0xce, 0x0d, 0x38, 0x77, 0xfb, 0x8d, 0xa1, 0xad, 0xc4, 0x4a, 0x5f\n    ];\n\n    // Verify the signature\n    let is_valid = std::ecdsa_secp256k1::verify_signature(pub_x, pub_y, sig_64, message_hash);\n    assert(is_valid);\n}\n\n\n\n\n\n\n\n// Unconstrained function to convert u64 to ASCII bytes\nunconstrained fn u64_to_ascii_bytes(value: u64) -> [u8; 20] {\n    let mut result: [u8; 20] = [0; 20];\n    let mut temp = value;\n    let mut pos = 19;\n    \n    // Handle zero case\n    if value == 0 {\n        result[19] = 48; // '0'\n    } else {\n        // Convert each digit to ASCII\n        while temp > 0 {\n            let digit = (temp % 10) as u8;\n            result[pos] = digit + 48; // Convert to ASCII\n            temp = temp / 10;\n            if pos > 0 {\n                pos -= 1;\n            }\n        }\n    }\n    \n    // Shift all digits to the right\n    let mut shifted: [u8; 20] = [0; 20];\n    let mut count = 0;\n    for i in 0..20 {\n        if result[i] != 0 {\n            count += 1;\n        }\n    }\n    \n    for i in 0..count {\n        shifted[20 - count + i] = result[20 - count + i];\n    }\n    \n    shifted\n}\n\n// Function to hash a u64 value using Keccak256\nfn hash_u64(value: u64) -> [u8; 32] {\n    // Convert value to ASCII bytes using unconstrained function\n    let digits = unsafe { u64_to_ascii_bytes(value) };\n    \n    // Count non-zero digits\n    let mut digit_count = 0;\n    for i in 0..20 {\n        if digits[i] != 0 {\n            digit_count += 1;\n        }\n    }\n    \n    // Copy digits to message\n    let mut message: [u8; 64] = [0; 64];\n    for i in 0..20 {\n        if i < digit_count {\n            message[i] = digits[20 - digit_count + i];\n        }\n    }\n    \n    // Hash the digits\n    keccak256(message, digit_count)\n}\n\n\n#[test]\nfn test_main(){\n    let message_hash: [u8; 32] = [\n        0x6c, 0xf3, 0xc1, 0xc3, 0xe4, 0x05, 0xa2, 0x13, 0x73, 0x4d, 0x31, 0xbe, 0x4d, 0x4e, 0xed, 0x85, 0x3b, 0x03, 0x02, 0xa3, 0x83, 0x42, 0x7e, 0x0b, 0xe1, 0x5b, 0xe2, 0x31, 0x08, 0xb2, 0x37, 0x02\n    ];\n\n    let operation_signature: [u8; 65] = [\n        0xc0, 0x78, 0x17, 0x63, 0xe9, 0x49, 0x34, 0xaf, 0xd8, 0xae, 0x23, 0x32, 0x36, 0x03, 0x4b, 0x93, 0xcf, 0x94, 0x8a, 0x5b, 0x80, 0xeb, 0x28, 0xc5, 0x20, 0xe8, 0x2c, 0xec, 0x11, 0xf2, 0xbb, 0xe4, 0x26, 0xec, 0x03, 0xf3, 0x1e, 0xcc, 0xf5, 0xad, 0xe1, 0x4c, 0xd2, 0xb1, 0x86, 0x60, 0xa9, 0x5d, 0x38, 0xd7, 0x8f, 0x3a, 0x80, 0x08, 0xfa, 0xc8, 0xf5, 0x0d, 0x9f, 0x16, 0x28, 0x7e, 0xaf, 0xd6, 0x1b\n    ];\n    \n    let identity_verification_signature: [u8; 65] = [\n        0xc0, 0x78, 0x17, 0x63, 0xe9, 0x49, 0x34, 0xaf, 0xd8, 0xae, 0x23, 0x32, 0x36, 0x03, 0x4b, 0x93, 0xcf, 0x94, 0x8a, 0x5b, 0x80, 0xeb, 0x28, 0xc5, 0x20, 0xe8, 0x2c, 0xec, 0x11, 0xf2, 0xbb, 0xe4, 0x26, 0xec, 0x03, 0xf3, 0x1e, 0xcc, 0xf5, 0xad, 0xe1, 0x4c, 0xd2, 0xb1, 0x86, 0x60, 0xa9, 0x5d, 0x38, 0xd7, 0x8f, 0x3a, 0x80, 0x08, 0xfa, 0xc8, 0xf5, 0x0d, 0x9f, 0x16, 0x28, 0x7e, 0xaf, 0xd6, 0x1b\n    ];\n\n    let identity_pub_x: [u8; 32] = [\n        0x32, 0x08, 0x25, 0x63, 0xc6, 0x93, 0x61, 0xcf, 0xe9, 0x74, 0xc7, 0xb6, 0x99, 0x6a, 0x14, 0x92, 0x17, 0xd9, 0xb4, 0x38, 0xb0, 0x4b, 0x94, 0x0a, 0x53, 0x0a, 0xd1, 0xbc, 0x23, 0x43, 0x37, 0xcc\n    ];\n    \n    let identity_pub_y: [u8; 32] = [\n        0x6a, 0x85, 0x02, 0x04, 0x8a, 0x03, 0x54, 0x28, 0x3f, 0xa1, 0xdb, 0x34, 0x64, 0x47, 0x83, 0x05, 0x2b, 0xdd, 0xc2, 0x6a, 0x5e, 0xce, 0x0d, 0x38, 0x77, 0xfb, 0x8d, 0xa1, 0xad, 0xc4, 0x4a, 0x5f\n    ];\n\n    let operation_pub_x: [u8; 32] = [\n        0x32, 0x08, 0x25, 0x63, 0xc6, 0x93, 0x61, 0xcf, 0xe9, 0x74, 0xc7, 0xb6, 0x99, 0x6a, 0x14, 0x92, 0x17, 0xd9, 0xb4, 0x38, 0xb0, 0x4b, 0x94, 0x0a, 0x53, 0x0a, 0xd1, 0xbc, 0x23, 0x43, 0x37, 0xcc\n    ];\n    \n    let operation_pub_y: [u8; 32] = [\n        0x6a, 0x85, 0x02, 0x04, 0x8a, 0x03, 0x54, 0x28, 0x3f, 0xa1, 0xdb, 0x34, 0x64, 0x47, 0x83, 0x05, 0x2b, 0xdd, 0xc2, 0x6a, 0x5e, 0xce, 0x0d, 0x38, 0x77, 0xfb, 0x8d, 0xa1, 0xad, 0xc4, 0x4a, 0x5f\n    ];\n\n    let signers_identifiers: [u8; 32 * MAX_SIGNERS] = [\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42,\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42,\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42\n    ];\n\n    let threshold: u32 = 1;\n\n    let contract_address: [u8; 20] = [\n        0x5b, 0x38, 0xda, 0x6a, 0x70, 0x1c, 0x56, 0x85, 0x45, 0xdc, 0xfc, 0xb0, 0x3f, 0xcb, 0x87, 0x5f, 0x56, 0xbe, 0xdd, 0xc4\n    ];\n\n\n\n    let (field_contract_address,  message_hash_field_31_bytes, signer_identifiers_hash_field_31_bytes,  last_bytes_field) = main(\n        message_hash,\n        operation_signature,\n        identity_verification_signature,\n        identity_pub_x,\n        identity_pub_y,\n        operation_pub_x,\n        operation_pub_y,\n        signers_identifiers,\n        threshold,\n        contract_address\n    );\n\n    println(\"Field contract address:\");\n    println(field_contract_address);\n\n    println(\"Message hash field 31 bytes:\");\n    println(message_hash_field_31_bytes);\n    \n    println(\"Signer identifiers hash field 31 bytes:\");\n    println(signer_identifiers_hash_field_31_bytes);\n\n    println(\"Last bytes:\");\n    println(last_bytes_field);\n}\n\n#[test] \nfn test_identity_hash(){\n    let contract_address: [u8; 20] = [\n        0x5b, 0x38, 0xda, 0x6a, 0x70, 0x1c, 0x56, 0x85, 0x45, 0xdc, 0xfc, 0xb0, 0x3f, 0xcb, 0x87, 0x5f, 0x56, 0xbe, 0xdd, 0xc4\n    ];\n    \n    let address_hex = bytes_to_hex_string(contract_address);\n    let identity_hash = keccak256(address_hex, 40);\n    println(\"Identity hash:\");\n    println(identity_hash);\n}\n\n// Helper function to convert bytes to hex string\nfn bytes_to_hex_string(bytes: [u8; 20]) -> [u8; 40] {\n    let mut hex_string: [u8; 40] = [0; 40];\n    for i in 0..20 {\n        let byte = bytes[i];\n        let high = byte >> 4;\n        let low = byte & 0x0f;\n        \n        // Convert high nibble to hex\n        if high < 10 {\n            hex_string[i * 2] = high + 48; // '0' to '9'\n        } else {\n            hex_string[i * 2] = high + 87; // 'a' to 'f'\n        }\n        \n        // Convert low nibble to hex\n        if low < 10 {\n            hex_string[i * 2 + 1] = low + 48; // '0' to '9'\n        } else {\n            hex_string[i * 2 + 1] = low + 87; // 'a' to 'f'\n        }\n    }\n    hex_string\n}\n\n// Helper function to convert signature bytes to hex string\nfn signature_to_hex_string(signature: [u8; 65]) -> [u8; 130] {\n    let mut hex_string: [u8; 130] = [0; 130];\n    for i in 0..65 {  // Use all 65 bytes\n        let byte = signature[i];\n        let high = byte >> 4;\n        let low = byte & 0x0f;\n        \n        // Convert high nibble to hex\n        if high < 10 {\n            hex_string[i * 2] = high + 48; // '0' to '9'\n        } else {\n            hex_string[i * 2] = high + 87; // 'a' to 'f'\n        }\n        \n        // Convert low nibble to hex\n        if low < 10 {\n            hex_string[i * 2 + 1] = low + 48; // '0' to '9'\n        } else {\n            hex_string[i * 2 + 1] = low + 87; // 'a' to 'f'\n        }\n    }\n    hex_string\n}\n\n#[test]\nfn test_signature_bytes_to_ascii(){\n    let signature_bytes: [u8; 65] = [\n        0xc0, 0x78, 0x17, 0x63, 0xe9, 0x49, 0x34, 0xaf, 0xd8, 0xae, 0x23, 0x32, 0x36, 0x03, 0x4b, 0x93, 0xcf, 0x94, 0x8a, 0x5b, 0x80, 0xeb, 0x28, 0xc5, 0x20, 0xe8, 0x2c, 0xec, 0x11, 0xf2, 0xbb, 0xe4, 0x26, 0xec, 0x03, 0xf3, 0x1e, 0xcc, 0xf5, 0xad, 0xe1, 0x4c, 0xd2, 0xb1, 0x86, 0x60, 0xa9, 0x5d, 0x38, 0xd7, 0x8f, 0x3a, 0x80, 0x08, 0xfa, 0xc8, 0xf5, 0x0d, 0x9f, 0x16, 0x28, 0x7e, 0xaf, 0xd6, 0x1b\n    ];\n    \n    let signature_hex = signature_to_hex_string(signature_bytes);\n    let signature_hash = keccak256(signature_hex, 130);\n    println(\"Signature hash:\");\n    println(signature_hash);\n}\n\n// Helper function to hash signer identifiers\nfn hash_signer_identifiers(signers: [u8; 32 * MAX_SIGNERS], num_signers: u32) -> [u8; 32] {\n    // Convert to hex string\n    let mut identifier_hex: [u8; 64 * MAX_SIGNERS] = [0; 64 * MAX_SIGNERS];\n    for i in 0..MAX_SIGNERS {\n        if i < num_signers {\n            let byte = signers[i * 32];\n            let high = byte >> 4;\n            let low = byte & 0x0f;\n            \n            // Convert high nibble to hex\n            if high < 10 {\n                identifier_hex[i * 64] = high + 48; // '0' to '9'\n            } else {\n                identifier_hex[i * 64] = high + 87; // 'a' to 'f'\n            }\n            \n            // Convert low nibble to hex\n            if low < 10 {\n                identifier_hex[i * 64 + 1] = low + 48; // '0' to '9'\n            } else {\n                identifier_hex[i * 64 + 1] = low + 87; // 'a' to 'f'\n            }\n        }\n    }\n\n    keccak256(identifier_hex, 64 * num_signers)\n}\n\n#[test]\nfn test_signer_identifier_hash(){\n    let signer_identifier: [u8; 32 * MAX_SIGNERS] = [\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42,\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42,\n        0xae, 0x33, 0xed, 0x35, 0xde, 0x75, 0x38, 0x0f, 0x90, 0x7e, 0x2c, 0x5b, 0x84, 0x36, 0x21, 0x5e, 0x50, 0x3e, 0x7b, 0x91, 0x95, 0x25, 0x07, 0x18, 0xab, 0xfc, 0x62, 0x75, 0x93, 0x56, 0x1f, 0x42\n    ];\n\n    let identifier_hash = hash_signer_identifiers(signer_identifier, 3);\n    println(\"Signer identifier hash:\");\n    println(identifier_hash);\n}","path":"/home/drone/projects/multisig-circuits/ecdsa_signer/src/main.nr"},"62":{"source":"\r\nuse std::runtime::is_unconstrained;\r\nuse std::hash::keccak::keccakf1600;\r\n\r\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\r\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\r\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\r\nglobal NUM_KECCAK_LANES: u32 = 25;\r\n\r\n#[no_predicates]\r\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\r\n    assert(N >= message_size);\r\n\r\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\r\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\r\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\r\n    if is_unconstrained() {\r\n        for i in 0..message_size {\r\n            block_bytes[i] = input[i];\r\n        }\r\n    } else {\r\n        for i in 0..N {\r\n            if i < message_size {\r\n                block_bytes[i] = input[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    //1. format_input_lanes\r\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    //maximum number of bytes to hash\r\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\r\n\r\n    block_bytes[message_size] = 1;\r\n    block_bytes[real_blocks_bytes - 1] = 0x80;\r\n\r\n    // populate a vector of 64-bit limbs from our byte array\r\n    let mut sliced_buffer =\r\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\r\n    for i in 0..sliced_buffer.len() {\r\n        let limb_start = WORD_SIZE * i;\r\n\r\n        let mut sliced = 0;\r\n        let mut v = 1;\r\n        for k in 0..WORD_SIZE {\r\n            sliced += v * (block_bytes[limb_start + k] as Field);\r\n            v *= 256;\r\n        }\r\n\r\n        sliced_buffer[i] = sliced as u64;\r\n    }\r\n\r\n    //2. sponge_absorb\r\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\r\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\r\n    // thus allowing us to simplify the loop body.\r\n    if is_unconstrained() {\r\n        for i in 0..real_max_blocks {\r\n            if (i == 0) {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = sliced_buffer[j];\r\n                }\r\n            } else {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n            }\r\n            state = keccakf1600(state);\r\n        }\r\n    } else {\r\n        // `real_max_blocks` is guaranteed to at least be `1`\r\n        // We peel out the first block as to avoid a conditional inside of the loop.\r\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\r\n        for j in 0..LIMBS_PER_BLOCK {\r\n            state[j] = sliced_buffer[j];\r\n        }\r\n        state = keccakf1600(state);\r\n        for i in 1..max_blocks {\r\n            if i < real_max_blocks {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n                state = keccakf1600(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    //3. sponge_squeeze\r\n    let mut result = [0; 32];\r\n    for i in 0..4 {\r\n        let lane = state[i] as Field;\r\n        let lane_le: [u8; 8] = lane.to_le_bytes();\r\n        for j in 0..8 {\r\n            result[8 * i + j] = lane_le[j];\r\n        }\r\n    }\r\n    result\r\n}","path":"/home/drone/projects/multisig-circuits/ecdsa_signer/lib/keccak256/src/keccak256.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}