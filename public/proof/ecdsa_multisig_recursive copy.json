{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":7998536051332487882,"abi":{"parameters":[{"name":"p1_verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"private"},{"name":"p1_proof","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"private"},{"name":"p1_public_inputs","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"p1_key_hash","type":{"kind":"field"},"visibility":"private"},{"name":"p2_verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"private"},{"name":"p2_proof","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"private"},{"name":"p2_public_inputs","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"p2_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"nVFLDoMgEL3LrFk4WD94laYxqGhICBrEJg3h7oVG2qZ10y4f837DOBhEt02t1OO8QnN2oOaeWznrgBxkj6d14Tqi1XJjoalOlIDQAzQ1lp7AKJWApkRPvqiYU9y5mLPiSabMXwjgkTtmWCRJVtfv/kFCf5UE0BmplJzaz80clId2FKvdjVbs//18QFduJO+UiJFxuOk+NQjQ3pY0SR0XM/di2IyIbV9F89DzxEjB4q/Fo5QFqbIQEWLu","file_map":{"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"use keccak256::keccak256;\nuse dep::std::verify_proof;\n\nunconstrained pub fn verifyProof(\n    verification_key: [Field; 128],\n    proof: [Field; 456],\n    public_inputs: [Field; 4],\n    key_hash: Field\n) -> bool {\n    verify_proof(verification_key, proof, public_inputs, key_hash);\n    // If verify_proof fails, it will throw an error, so we can safely return true here\n    true\n}\n\nfn main(\n    p1_verification_key: [Field; 128],\n    p1_proof: [Field; 456],\n    p1_public_inputs: [Field; 4],\n    p1_key_hash: Field,\n\n    p2_verification_key: [Field; 128],\n    p2_proof: [Field; 456],\n    p2_public_inputs: [Field; 4],\n    p2_key_hash: Field,\n) -> pub (Field, Field, Field, Field) {\n    // If verification fails, the program will fail here\n    verify_proof(p1_verification_key, p1_proof, p1_public_inputs, p1_key_hash);\n    \n    let p1_message_hash_field = p1_public_inputs[1];\n    let p1_signer_identifiers_hash_field = p1_public_inputs[2];\n    \n    // If verification fails, the program will fail here\n    unsafe { verifyProof(p2_verification_key, p2_proof, p2_public_inputs, p2_key_hash) };\n    \n    let p2_message_hash_field = p2_public_inputs[1];\n    let p2_signer_identifiers_hash_field = p2_public_inputs[2]; \n\n    (p1_message_hash_field, p1_signer_identifiers_hash_field, p2_message_hash_field, p2_signer_identifiers_hash_field)\n}\n\n","path":"/home/drone/projects/multisig-circuits/ecdsa_multisig/src/main.nr"}},"names":["main"],"brillig_names":["verifyProof"]}